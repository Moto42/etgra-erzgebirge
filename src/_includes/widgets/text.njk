{% from "widgets/banners.njk" import headingBanner %}

{# The standard style for body content included via markdown 

    - content: markdown string
    [tailwind prose docs](https://github.com/tailwindlabs/tailwindcss-typography?tab=readme-ov-file)
 #}
{% macro styledMarkdown(content) %}
<div {{oneline-}} 
    class="
        prose max-w-none p-4
        prose-img:max-w-52 prose-img:float-right prose-img:clear-both prose-img:my-4 prose-img:mx-4
        prose-headings:clear-both prose-headings:font-bold prose-headings:text-txinfomedia-bg-headings
        prose-ul:grid prose-ul:grid-cols-[repeat(auto-fit,minmax(25ch,1fr))] prose-ul:gap-4 prose-ul:gap-y-2
        prose-ul:list-image-txinfomedia
        prose-p:leading-relaxed prose-p:text-lg font-semibold
    "
{{-endoneline}}>
    {{content | safe }}
</div>
{% endmacro %}

{# 
    Renders a list of content items, applying different styles and components based on the item type.

    @param {Array} content - An array of content objects. Each object should have a `type` property that determines how it will be rendered.
        - `type`: A string that can be either 'text' or 'banner'.
        - `text`: A string of markdown content (required if type is 'text').
        - `headinglevel`: An integer representing the heading level (required if type is 'banner').
        - `heading`: A string for the banner heading (required if type is 'banner').
        - `image`: A string URL for the banner image (optional if type is 'banner').

    Example usage:
    {% set content = [
        { type: 'text', text: '# Hello World' },
        { type: 'banner', headinglevel: 2, heading: 'Welcome', image: '/path/to/image.jpg' }
    ] %}
    {{ renderContent(content) }}
#}
{% macro renderContent(content) %}
        <div class="mx-auto w-full">
        {% for item in content %}
                {% if item.type == 'text' %}
                    {% set outhtml = (item.text | parseMarkdown | safe) %}
                    {{ styledMarkdown(outhtml) }}
                {% elseif item.type == 'banner' %}
                    {{headingBanner(item.headinglevel, item.heading, item.image)}}
                {% endif %}
        {% endfor %}
</div>
{% endmacro %}

{# Container for the results of SidebarLinkify

    Will recieve HTML content consisting of nested <ul/> and <li/> elements.
    Primarily here to keep the definition of the container div's classes neatly 
    separated from the the layout.

    @param {String} content - HTML content
#}
{% macro sidebarLinks(content) %}
    <div class="not-prose">
        {% sidebarLinkify content %}
    </div>
{% endmacro %}
